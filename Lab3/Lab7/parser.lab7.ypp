%{
  #include <stdio.h>
  #include <vector>
  #include <cstring>
  #include <math.h>
  #include <iostream>

  std::vector< std::pair< std::string, double (*)(double) > > FunctionTable;
  extern char yytext[];
  #define YYERROR_VERBOSE 1
  int yylex();
  extern int yylineno;
  int yycol = 0;

  void yyerror(char *s)
  {
    fflush(stdout);
    printf("Error: line %d column %d: %s\n",yylineno,yycol,s);
  }
  std::vector< std::pair< char *, double > > Variables;
  double GetValue(char *name)
  {
    std::vector< std::pair< char *, double > >::iterator i;
    for(i = Variables.begin(); i != Variables.end(); i++)
    {
      if (!strcmp(i->first, name))
      {
        return(i->second);
      }
    }
    std::cerr << "Error: " << name << " does not exist" << std::endl;
    return(0.0);
  }
  void SetValue(char *name, double value)
  {
    std::vector< std::pair< char *, double > >::iterator i;
    for(i = Variables.begin(); i != Variables.end(); i++)
    {
      if (!strcmp(i->first, name))
      {
        i->second = value;
      }
    }
    std::pair< char *, double > P(name,value);
    Variables.push_back(P);
  }

  double ExecFunc(char *name, double argument)
  {
    std::vector< std::pair< std::string, double (*)(double) > >::iterator i;
    for(i = FunctionTable.begin(); i != FunctionTable.end(); i++)
    {
      if (i->first == name)
      {
        return((*(i->second))(argument));
      }
    }
    std::cerr << "Error: Function " << name << " does not exist" << std::endl;
    return(0.0);
  }
%}

%union {
  double Value;
  char *Name;
}

%token <Name> IDENTIFIER
%token <Name> FUNCTION
%token <Value> CONSTANT

%type <Value> expr
%type <Value> command
%type <Value> assign
%type <Value> function

%left '+' '-'
%left '*' '/'
%right '^'

%%

root : command '\n'                     { }
      | root command '\n'               { }
     ;

command : expr                          { std::cout << "= " << $1 << std::endl;}
      | assign                          { std::cout << "= " << $1 << std::endl;}
      ;

expr : expr '+' expr                    { $$ = $1 + $3; }
     | expr '-' expr                    { $$ = $1 - $3; }
     | expr '*' expr                    { $$ = $1 * $3; }
     | expr '/' expr                    { $$ = $1 / $3; }
     | expr '^' expr                    { $$ = pow($1, $3); }
     | '(' expr ')'                     { $$ = $2; }
     | function                         { $$ = $1; }
     | CONSTANT                         { $$ = $1; }
     | IDENTIFIER                       { $$ = GetValue($1); }
     ;

function : FUNCTION expr                { $$ = ExecFunc($1, $2);}
        | FUNCTION assign               { $$ = ExecFunc($1, $2);}
        ;

assign : IDENTIFIER '=' expr            { SetValue($1, $3);
                                          $$ = $3;
                                        }
      ;

%%
